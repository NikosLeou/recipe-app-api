# the version of the docker-compose syntax that we will be using (new versions are released often)
version: "3.9"

# this is the main block. docker-compose files are typically consist of one or more service as needed for the application
services:
  app:
    build:
    #it says we want to build the docker file inside our current directory
      context: .
      #check requirements.dev.txt: it basically says if we run using docker-compose (which we only do in development), set DEV=true. This will overwrite the DEV in the dockerfile
      args:
        - DEV=true
    # this maps port 8000 on our local machine to port 8000 inside our docker container. this is how we can access the network when we want to connect to our server
    ports:
      - "8000:8000"
    # this is a way to map directories from our system inside the docker container. we want the updates that we make to our code in the local project to be reflected 
    # in the container in real time. It basically allows that everything we create inside the container to get mapped to our project, and everything we create in our
    # project to get mapped inside the container.
    volumes:
      - ./app:/app
    # this is the command you use to run the service. This command can be overwritten when runnning "docker-compose run", but if we dont then this one here is used
    # by default
    # Additional logic has been added: we want to run the wait_for_db first, then apply any migrations to the DB, then start the server.
    command:  >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      # using depends_on ensures that the DB services starts, but doesnt ensure that the application (DB) running on that service is actually running. For that reason, we'll have to write a 
      # custom Django management command (wait_for_db) that will check if the DB has started, and hold up execution if not, as well as a corresponding unit test.
    depends_on:
      - db


  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme



volumes:
  dev-db-data: